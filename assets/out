#!/bin/bash
# vim: set ft=sh

set -e
set -x

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi
cd $source

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0

load_pubkey $payload
load_git_crypt_key $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // "master"' < $payload)
file=$(jq -r '.source.file // "version"' < $payload)
name=$(jq -r '.source.name // ""' < $payload)
mail=$(jq -r '.source.mail // ""' < $payload)
bump=$(jq -r '.params.bump // ""' < $payload)
initial_version=$(jq -r '.source.initial_version // "0.0.1"' < $payload)

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri):" >&2
  cat $payload >&2
  exit 1
fi

git checkout ${branch}-version
NEW_VERSION=$(head -n 1 $file)
GIT_VERSION=$(tail -n 1 $file)
git config --global user.name "$name"
git config --global user.email "$mail"
git add $file
git commit -a -m "Bump to version $NEWVERSION"

git remote add push-target $uri
git push push-target

jq -n "{
  number: \"$NEW_VERSION\",
  version: \"$GIT_VERSION\"
}" >&3
